// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cosmos/base/query/v1beta1/pagination.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
function createBasePageRequest() {
    return { key: new Uint8Array(0), offset: 0n, limit: 0n, countTotal: false, reverse: false };
}
export const PageRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (message.offset !== 0n) {
            if (BigInt.asUintN(64, message.offset) !== message.offset) {
                throw new globalThis.Error("value provided for field message.offset of type uint64 too large");
            }
            writer.uint32(16).uint64(message.offset);
        }
        if (message.limit !== 0n) {
            if (BigInt.asUintN(64, message.limit) !== message.limit) {
                throw new globalThis.Error("value provided for field message.limit of type uint64 too large");
            }
            writer.uint32(24).uint64(message.limit);
        }
        if (message.countTotal !== false) {
            writer.uint32(32).bool(message.countTotal);
        }
        if (message.reverse !== false) {
            writer.uint32(40).bool(message.reverse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.offset = reader.uint64();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.limit = reader.uint64();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.countTotal = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.reverse = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
            offset: isSet(object.offset) ? BigInt(object.offset) : 0n,
            limit: isSet(object.limit) ? BigInt(object.limit) : 0n,
            countTotal: isSet(object.countTotal) ? globalThis.Boolean(object.countTotal) : false,
            reverse: isSet(object.reverse) ? globalThis.Boolean(object.reverse) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key.length !== 0) {
            obj.key = base64FromBytes(message.key);
        }
        if (message.offset !== 0n) {
            obj.offset = message.offset.toString();
        }
        if (message.limit !== 0n) {
            obj.limit = message.limit.toString();
        }
        if (message.countTotal !== false) {
            obj.countTotal = message.countTotal;
        }
        if (message.reverse !== false) {
            obj.reverse = message.reverse;
        }
        return obj;
    },
    create(base) {
        return PageRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePageRequest();
        message.key = object.key ?? new Uint8Array(0);
        message.offset = object.offset ?? 0n;
        message.limit = object.limit ?? 0n;
        message.countTotal = object.countTotal ?? false;
        message.reverse = object.reverse ?? false;
        return message;
    },
};
function createBasePageResponse() {
    return { nextKey: new Uint8Array(0), total: 0n };
}
export const PageResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.nextKey.length !== 0) {
            writer.uint32(10).bytes(message.nextKey);
        }
        if (message.total !== 0n) {
            if (BigInt.asUintN(64, message.total) !== message.total) {
                throw new globalThis.Error("value provided for field message.total of type uint64 too large");
            }
            writer.uint32(16).uint64(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nextKey = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nextKey: isSet(object.nextKey) ? bytesFromBase64(object.nextKey) : new Uint8Array(0),
            total: isSet(object.total) ? BigInt(object.total) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nextKey.length !== 0) {
            obj.nextKey = base64FromBytes(message.nextKey);
        }
        if (message.total !== 0n) {
            obj.total = message.total.toString();
        }
        return obj;
    },
    create(base) {
        return PageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePageResponse();
        message.nextKey = object.nextKey ?? new Uint8Array(0);
        message.total = object.total ?? 0n;
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=pagination.js.map