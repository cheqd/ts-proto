"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: feemarket/feemarket/v1/params.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
function createBaseParams() {
    return {
        alpha: "",
        beta: "",
        gamma: "",
        delta: "",
        minBaseGasPrice: "",
        minLearningRate: "",
        maxLearningRate: "",
        maxBlockUtilization: 0n,
        window: 0n,
        feeDenom: "",
        enabled: false,
        distributeFees: false,
    };
}
exports.Params = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.alpha !== "") {
            writer.uint32(10).string(message.alpha);
        }
        if (message.beta !== "") {
            writer.uint32(18).string(message.beta);
        }
        if (message.gamma !== "") {
            writer.uint32(26).string(message.gamma);
        }
        if (message.delta !== "") {
            writer.uint32(34).string(message.delta);
        }
        if (message.minBaseGasPrice !== "") {
            writer.uint32(42).string(message.minBaseGasPrice);
        }
        if (message.minLearningRate !== "") {
            writer.uint32(50).string(message.minLearningRate);
        }
        if (message.maxLearningRate !== "") {
            writer.uint32(58).string(message.maxLearningRate);
        }
        if (message.maxBlockUtilization !== 0n) {
            if (BigInt.asUintN(64, message.maxBlockUtilization) !== message.maxBlockUtilization) {
                throw new globalThis.Error("value provided for field message.maxBlockUtilization of type uint64 too large");
            }
            writer.uint32(64).uint64(message.maxBlockUtilization);
        }
        if (message.window !== 0n) {
            if (BigInt.asUintN(64, message.window) !== message.window) {
                throw new globalThis.Error("value provided for field message.window of type uint64 too large");
            }
            writer.uint32(72).uint64(message.window);
        }
        if (message.feeDenom !== "") {
            writer.uint32(82).string(message.feeDenom);
        }
        if (message.enabled !== false) {
            writer.uint32(88).bool(message.enabled);
        }
        if (message.distributeFees !== false) {
            writer.uint32(96).bool(message.distributeFees);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.alpha = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.beta = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gamma = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.delta = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.minBaseGasPrice = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.minLearningRate = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.maxLearningRate = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.maxBlockUtilization = reader.uint64();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.window = reader.uint64();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.feeDenom = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.distributeFees = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alpha: isSet(object.alpha) ? globalThis.String(object.alpha) : "",
            beta: isSet(object.beta) ? globalThis.String(object.beta) : "",
            gamma: isSet(object.gamma) ? globalThis.String(object.gamma) : "",
            delta: isSet(object.delta) ? globalThis.String(object.delta) : "",
            minBaseGasPrice: isSet(object.minBaseGasPrice) ? globalThis.String(object.minBaseGasPrice) : "",
            minLearningRate: isSet(object.minLearningRate) ? globalThis.String(object.minLearningRate) : "",
            maxLearningRate: isSet(object.maxLearningRate) ? globalThis.String(object.maxLearningRate) : "",
            maxBlockUtilization: isSet(object.maxBlockUtilization) ? BigInt(object.maxBlockUtilization) : 0n,
            window: isSet(object.window) ? BigInt(object.window) : 0n,
            feeDenom: isSet(object.feeDenom) ? globalThis.String(object.feeDenom) : "",
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
            distributeFees: isSet(object.distributeFees) ? globalThis.Boolean(object.distributeFees) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alpha !== "") {
            obj.alpha = message.alpha;
        }
        if (message.beta !== "") {
            obj.beta = message.beta;
        }
        if (message.gamma !== "") {
            obj.gamma = message.gamma;
        }
        if (message.delta !== "") {
            obj.delta = message.delta;
        }
        if (message.minBaseGasPrice !== "") {
            obj.minBaseGasPrice = message.minBaseGasPrice;
        }
        if (message.minLearningRate !== "") {
            obj.minLearningRate = message.minLearningRate;
        }
        if (message.maxLearningRate !== "") {
            obj.maxLearningRate = message.maxLearningRate;
        }
        if (message.maxBlockUtilization !== 0n) {
            obj.maxBlockUtilization = message.maxBlockUtilization.toString();
        }
        if (message.window !== 0n) {
            obj.window = message.window.toString();
        }
        if (message.feeDenom !== "") {
            obj.feeDenom = message.feeDenom;
        }
        if (message.enabled !== false) {
            obj.enabled = message.enabled;
        }
        if (message.distributeFees !== false) {
            obj.distributeFees = message.distributeFees;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.alpha = object.alpha ?? "";
        message.beta = object.beta ?? "";
        message.gamma = object.gamma ?? "";
        message.delta = object.delta ?? "";
        message.minBaseGasPrice = object.minBaseGasPrice ?? "";
        message.minLearningRate = object.minLearningRate ?? "";
        message.maxLearningRate = object.maxLearningRate ?? "";
        message.maxBlockUtilization = object.maxBlockUtilization ?? 0n;
        message.window = object.window ?? 0n;
        message.feeDenom = object.feeDenom ?? "";
        message.enabled = object.enabled ?? false;
        message.distributeFees = object.distributeFees ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=params.js.map