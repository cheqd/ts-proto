"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: feemarket/feemarket/v1/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.GasPricesResponse = exports.GasPricesRequest = exports.GasPriceResponse = exports.GasPriceRequest = exports.StateResponse = exports.StateRequest = exports.ParamsResponse = exports.ParamsRequest = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const coin_js_1 = require("../../../cosmos/base/v1beta1/coin.js");
const genesis_js_1 = require("./genesis.js");
const params_js_1 = require("./params.js");
function createBaseParamsRequest() {
    return {};
}
exports.ParamsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseParamsRequest();
        return message;
    },
};
function createBaseParamsResponse() {
    return { params: undefined };
}
exports.ParamsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_js_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_js_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? params_js_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_js_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.ParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? params_js_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseStateRequest() {
    return {};
}
exports.StateRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.StateRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseStateRequest();
        return message;
    },
};
function createBaseStateResponse() {
    return { state: undefined };
}
exports.StateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.state !== undefined) {
            genesis_js_1.State.encode(message.state, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.state = genesis_js_1.State.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isSet(object.state) ? genesis_js_1.State.fromJSON(object.state) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== undefined) {
            obj.state = genesis_js_1.State.toJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.StateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStateResponse();
        message.state = (object.state !== undefined && object.state !== null) ? genesis_js_1.State.fromPartial(object.state) : undefined;
        return message;
    },
};
function createBaseGasPriceRequest() {
    return { denom: "" };
}
exports.GasPriceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGasPriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.GasPriceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGasPriceRequest();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseGasPriceResponse() {
    return { price: undefined };
}
exports.GasPriceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.price !== undefined) {
            coin_js_1.DecCoin.encode(message.price, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGasPriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.price = coin_js_1.DecCoin.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { price: isSet(object.price) ? coin_js_1.DecCoin.fromJSON(object.price) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.price !== undefined) {
            obj.price = coin_js_1.DecCoin.toJSON(message.price);
        }
        return obj;
    },
    create(base) {
        return exports.GasPriceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGasPriceResponse();
        message.price = (object.price !== undefined && object.price !== null)
            ? coin_js_1.DecCoin.fromPartial(object.price)
            : undefined;
        return message;
    },
};
function createBaseGasPricesRequest() {
    return {};
}
exports.GasPricesRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGasPricesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GasPricesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGasPricesRequest();
        return message;
    },
};
function createBaseGasPricesResponse() {
    return { prices: [] };
}
exports.GasPricesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.prices) {
            coin_js_1.DecCoin.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGasPricesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.prices.push(coin_js_1.DecCoin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            prices: globalThis.Array.isArray(object?.prices) ? object.prices.map((e) => coin_js_1.DecCoin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.prices?.length) {
            obj.prices = message.prices.map((e) => coin_js_1.DecCoin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GasPricesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGasPricesResponse();
        message.prices = object.prices?.map((e) => coin_js_1.DecCoin.fromPartial(e)) || [];
        return message;
    },
};
exports.QueryServiceName = "feemarket.feemarket.v1.Query";
class QueryClientImpl {
    rpc;
    service;
    constructor(rpc, opts) {
        this.service = opts?.service || exports.QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.State = this.State.bind(this);
        this.GasPrice = this.GasPrice.bind(this);
        this.GasPrices = this.GasPrices.bind(this);
    }
    Params(request) {
        const data = exports.ParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => exports.ParamsResponse.decode(new wire_1.BinaryReader(data)));
    }
    State(request) {
        const data = exports.StateRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "State", data);
        return promise.then((data) => exports.StateResponse.decode(new wire_1.BinaryReader(data)));
    }
    GasPrice(request) {
        const data = exports.GasPriceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GasPrice", data);
        return promise.then((data) => exports.GasPriceResponse.decode(new wire_1.BinaryReader(data)));
    }
    GasPrices(request) {
        const data = exports.GasPricesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GasPrices", data);
        return promise.then((data) => exports.GasPricesResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map