"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: feeabstraction/feeabs/v1beta1/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgRemoveHostZoneResponse = exports.MsgRemoveHostZone = exports.MsgUpdateHostZoneResponse = exports.MsgUpdateHostZone = exports.MsgAddHostZoneResponse = exports.MsgAddHostZone = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgSwapCrossChainResponse = exports.MsgSwapCrossChain = exports.MsgSendQueryIbcDenomTWAPResponse = exports.MsgSendQueryIbcDenomTWAP = exports.MsgFundFeeAbsModuleAccountResponse = exports.MsgFundFeeAbsModuleAccount = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const coin_js_1 = require("../../../cosmos/base/v1beta1/coin.js");
const params_js_1 = require("./params.js");
const proposal_js_1 = require("./proposal.js");
function createBaseMsgFundFeeAbsModuleAccount() {
    return { sender: "", amount: [] };
}
exports.MsgFundFeeAbsModuleAccount = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.amount) {
            coin_js_1.Coin.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFundFeeAbsModuleAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.amount.push(coin_js_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e) => coin_js_1.Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.amount?.length) {
            obj.amount = message.amount.map((e) => coin_js_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgFundFeeAbsModuleAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgFundFeeAbsModuleAccount();
        message.sender = object.sender ?? "";
        message.amount = object.amount?.map((e) => coin_js_1.Coin.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgFundFeeAbsModuleAccountResponse() {
    return {};
}
exports.MsgFundFeeAbsModuleAccountResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFundFeeAbsModuleAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgFundFeeAbsModuleAccountResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgFundFeeAbsModuleAccountResponse();
        return message;
    },
};
function createBaseMsgSendQueryIbcDenomTWAP() {
    return { sender: "" };
}
exports.MsgSendQueryIbcDenomTWAP = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSendQueryIbcDenomTWAP();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sender: isSet(object.sender) ? globalThis.String(object.sender) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        return obj;
    },
    create(base) {
        return exports.MsgSendQueryIbcDenomTWAP.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgSendQueryIbcDenomTWAP();
        message.sender = object.sender ?? "";
        return message;
    },
};
function createBaseMsgSendQueryIbcDenomTWAPResponse() {
    return {};
}
exports.MsgSendQueryIbcDenomTWAPResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSendQueryIbcDenomTWAPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgSendQueryIbcDenomTWAPResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgSendQueryIbcDenomTWAPResponse();
        return message;
    },
};
function createBaseMsgSwapCrossChain() {
    return { sender: "", ibcDenom: "" };
}
exports.MsgSwapCrossChain = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.ibcDenom !== "") {
            writer.uint32(18).string(message.ibcDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapCrossChain();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ibcDenom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            ibcDenom: isSet(object.ibcDenom) ? globalThis.String(object.ibcDenom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.ibcDenom !== "") {
            obj.ibcDenom = message.ibcDenom;
        }
        return obj;
    },
    create(base) {
        return exports.MsgSwapCrossChain.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgSwapCrossChain();
        message.sender = object.sender ?? "";
        message.ibcDenom = object.ibcDenom ?? "";
        return message;
    },
};
function createBaseMsgSwapCrossChainResponse() {
    return {};
}
exports.MsgSwapCrossChainResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapCrossChainResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgSwapCrossChainResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgSwapCrossChainResponse();
        return message;
    },
};
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
exports.MsgUpdateParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            params_js_1.Params.encode(message.params, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.params = params_js_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            params: isSet(object.params) ? params_js_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = params_js_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params = (object.params !== undefined && object.params !== null)
            ? params_js_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
function createBaseMsgAddHostZone() {
    return { authority: "", hostChainConfig: undefined };
}
exports.MsgAddHostZone = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.hostChainConfig !== undefined) {
            proposal_js_1.HostChainFeeAbsConfig.encode(message.hostChainConfig, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddHostZone();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.hostChainConfig = proposal_js_1.HostChainFeeAbsConfig.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            hostChainConfig: isSet(object.hostChainConfig)
                ? proposal_js_1.HostChainFeeAbsConfig.fromJSON(object.hostChainConfig)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.hostChainConfig !== undefined) {
            obj.hostChainConfig = proposal_js_1.HostChainFeeAbsConfig.toJSON(message.hostChainConfig);
        }
        return obj;
    },
    create(base) {
        return exports.MsgAddHostZone.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgAddHostZone();
        message.authority = object.authority ?? "";
        message.hostChainConfig = (object.hostChainConfig !== undefined && object.hostChainConfig !== null)
            ? proposal_js_1.HostChainFeeAbsConfig.fromPartial(object.hostChainConfig)
            : undefined;
        return message;
    },
};
function createBaseMsgAddHostZoneResponse() {
    return {};
}
exports.MsgAddHostZoneResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddHostZoneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgAddHostZoneResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgAddHostZoneResponse();
        return message;
    },
};
function createBaseMsgUpdateHostZone() {
    return { authority: "", hostChainConfig: undefined };
}
exports.MsgUpdateHostZone = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.hostChainConfig !== undefined) {
            proposal_js_1.HostChainFeeAbsConfig.encode(message.hostChainConfig, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateHostZone();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.hostChainConfig = proposal_js_1.HostChainFeeAbsConfig.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            hostChainConfig: isSet(object.hostChainConfig)
                ? proposal_js_1.HostChainFeeAbsConfig.fromJSON(object.hostChainConfig)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.hostChainConfig !== undefined) {
            obj.hostChainConfig = proposal_js_1.HostChainFeeAbsConfig.toJSON(message.hostChainConfig);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateHostZone.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateHostZone();
        message.authority = object.authority ?? "";
        message.hostChainConfig = (object.hostChainConfig !== undefined && object.hostChainConfig !== null)
            ? proposal_js_1.HostChainFeeAbsConfig.fromPartial(object.hostChainConfig)
            : undefined;
        return message;
    },
};
function createBaseMsgUpdateHostZoneResponse() {
    return {};
}
exports.MsgUpdateHostZoneResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateHostZoneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateHostZoneResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateHostZoneResponse();
        return message;
    },
};
function createBaseMsgRemoveHostZone() {
    return { authority: "", ibcDenom: "" };
}
exports.MsgRemoveHostZone = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.ibcDenom !== "") {
            writer.uint32(18).string(message.ibcDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveHostZone();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ibcDenom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            ibcDenom: isSet(object.ibcDenom) ? globalThis.String(object.ibcDenom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.ibcDenom !== "") {
            obj.ibcDenom = message.ibcDenom;
        }
        return obj;
    },
    create(base) {
        return exports.MsgRemoveHostZone.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRemoveHostZone();
        message.authority = object.authority ?? "";
        message.ibcDenom = object.ibcDenom ?? "";
        return message;
    },
};
function createBaseMsgRemoveHostZoneResponse() {
    return {};
}
exports.MsgRemoveHostZoneResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveHostZoneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgRemoveHostZoneResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgRemoveHostZoneResponse();
        return message;
    },
};
exports.MsgServiceName = "feeabstraction.feeabs.v1beta1.Msg";
class MsgClientImpl {
    rpc;
    service;
    constructor(rpc, opts) {
        this.service = opts?.service || exports.MsgServiceName;
        this.rpc = rpc;
        this.SendQueryIbcDenomTWAP = this.SendQueryIbcDenomTWAP.bind(this);
        this.SwapCrossChain = this.SwapCrossChain.bind(this);
        this.FundFeeAbsModuleAccount = this.FundFeeAbsModuleAccount.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
        this.AddHostZone = this.AddHostZone.bind(this);
        this.UpdateHostZone = this.UpdateHostZone.bind(this);
        this.RemoveHostZone = this.RemoveHostZone.bind(this);
    }
    SendQueryIbcDenomTWAP(request) {
        const data = exports.MsgSendQueryIbcDenomTWAP.encode(request).finish();
        const promise = this.rpc.request(this.service, "SendQueryIbcDenomTWAP", data);
        return promise.then((data) => exports.MsgSendQueryIbcDenomTWAPResponse.decode(new wire_1.BinaryReader(data)));
    }
    SwapCrossChain(request) {
        const data = exports.MsgSwapCrossChain.encode(request).finish();
        const promise = this.rpc.request(this.service, "SwapCrossChain", data);
        return promise.then((data) => exports.MsgSwapCrossChainResponse.decode(new wire_1.BinaryReader(data)));
    }
    FundFeeAbsModuleAccount(request) {
        const data = exports.MsgFundFeeAbsModuleAccount.encode(request).finish();
        const promise = this.rpc.request(this.service, "FundFeeAbsModuleAccount", data);
        return promise.then((data) => exports.MsgFundFeeAbsModuleAccountResponse.decode(new wire_1.BinaryReader(data)));
    }
    UpdateParams(request) {
        const data = exports.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateParams", data);
        return promise.then((data) => exports.MsgUpdateParamsResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddHostZone(request) {
        const data = exports.MsgAddHostZone.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddHostZone", data);
        return promise.then((data) => exports.MsgAddHostZoneResponse.decode(new wire_1.BinaryReader(data)));
    }
    UpdateHostZone(request) {
        const data = exports.MsgUpdateHostZone.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateHostZone", data);
        return promise.then((data) => exports.MsgUpdateHostZoneResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveHostZone(request) {
        const data = exports.MsgRemoveHostZone.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveHostZone", data);
        return promise.then((data) => exports.MsgRemoveHostZoneResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map