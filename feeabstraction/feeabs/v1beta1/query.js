"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: feeabstraction/feeabs/v1beta1/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.AllQueryHostChainConfigResponse = exports.AllQueryHostChainConfigRequest = exports.QueryFeeabsModuleBalacesResponse = exports.QueryFeeabsModuleBalacesRequest = exports.QueryOsmosisArithmeticTwapResponse = exports.QueryOsmosisArithmeticTwapRequest = exports.QueryHostChainConfigResponse = exports.QueryHostChainConfigRequest = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const coin_js_1 = require("../../../cosmos/base/v1beta1/coin.js");
const proposal_js_1 = require("./proposal.js");
function createBaseQueryHostChainConfigRequest() {
    return { ibcDenom: "" };
}
exports.QueryHostChainConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ibcDenom !== "") {
            writer.uint32(10).string(message.ibcDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHostChainConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ibcDenom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ibcDenom: isSet(object.ibcDenom) ? globalThis.String(object.ibcDenom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.ibcDenom !== "") {
            obj.ibcDenom = message.ibcDenom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryHostChainConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryHostChainConfigRequest();
        message.ibcDenom = object.ibcDenom ?? "";
        return message;
    },
};
function createBaseQueryHostChainConfigResponse() {
    return { hostChainConfig: undefined };
}
exports.QueryHostChainConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.hostChainConfig !== undefined) {
            proposal_js_1.HostChainFeeAbsConfig.encode(message.hostChainConfig, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHostChainConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.hostChainConfig = proposal_js_1.HostChainFeeAbsConfig.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hostChainConfig: isSet(object.hostChainConfig)
                ? proposal_js_1.HostChainFeeAbsConfig.fromJSON(object.hostChainConfig)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hostChainConfig !== undefined) {
            obj.hostChainConfig = proposal_js_1.HostChainFeeAbsConfig.toJSON(message.hostChainConfig);
        }
        return obj;
    },
    create(base) {
        return exports.QueryHostChainConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryHostChainConfigResponse();
        message.hostChainConfig = (object.hostChainConfig !== undefined && object.hostChainConfig !== null)
            ? proposal_js_1.HostChainFeeAbsConfig.fromPartial(object.hostChainConfig)
            : undefined;
        return message;
    },
};
function createBaseQueryOsmosisArithmeticTwapRequest() {
    return { ibcDenom: "" };
}
exports.QueryOsmosisArithmeticTwapRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ibcDenom !== "") {
            writer.uint32(10).string(message.ibcDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOsmosisArithmeticTwapRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ibcDenom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ibcDenom: isSet(object.ibcDenom) ? globalThis.String(object.ibcDenom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.ibcDenom !== "") {
            obj.ibcDenom = message.ibcDenom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryOsmosisArithmeticTwapRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryOsmosisArithmeticTwapRequest();
        message.ibcDenom = object.ibcDenom ?? "";
        return message;
    },
};
function createBaseQueryOsmosisArithmeticTwapResponse() {
    return { arithmeticTwap: "" };
}
exports.QueryOsmosisArithmeticTwapResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.arithmeticTwap !== "") {
            writer.uint32(10).string(message.arithmeticTwap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOsmosisArithmeticTwapResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.arithmeticTwap = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { arithmeticTwap: isSet(object.arithmeticTwap) ? globalThis.String(object.arithmeticTwap) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.arithmeticTwap !== "") {
            obj.arithmeticTwap = message.arithmeticTwap;
        }
        return obj;
    },
    create(base) {
        return exports.QueryOsmosisArithmeticTwapResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryOsmosisArithmeticTwapResponse();
        message.arithmeticTwap = object.arithmeticTwap ?? "";
        return message;
    },
};
function createBaseQueryFeeabsModuleBalacesRequest() {
    return {};
}
exports.QueryFeeabsModuleBalacesRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeeabsModuleBalacesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryFeeabsModuleBalacesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryFeeabsModuleBalacesRequest();
        return message;
    },
};
function createBaseQueryFeeabsModuleBalacesResponse() {
    return { balances: [], address: "" };
}
exports.QueryFeeabsModuleBalacesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.balances) {
            coin_js_1.Coin.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeeabsModuleBalacesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.balances.push(coin_js_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            balances: globalThis.Array.isArray(object?.balances) ? object.balances.map((e) => coin_js_1.Coin.fromJSON(e)) : [],
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.balances?.length) {
            obj.balances = message.balances.map((e) => coin_js_1.Coin.toJSON(e));
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryFeeabsModuleBalacesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryFeeabsModuleBalacesResponse();
        message.balances = object.balances?.map((e) => coin_js_1.Coin.fromPartial(e)) || [];
        message.address = object.address ?? "";
        return message;
    },
};
function createBaseAllQueryHostChainConfigRequest() {
    return {};
}
exports.AllQueryHostChainConfigRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllQueryHostChainConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AllQueryHostChainConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAllQueryHostChainConfigRequest();
        return message;
    },
};
function createBaseAllQueryHostChainConfigResponse() {
    return { allHostChainConfig: [] };
}
exports.AllQueryHostChainConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.allHostChainConfig) {
            proposal_js_1.HostChainFeeAbsConfig.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllQueryHostChainConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.allHostChainConfig.push(proposal_js_1.HostChainFeeAbsConfig.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allHostChainConfig: globalThis.Array.isArray(object?.allHostChainConfig)
                ? object.allHostChainConfig.map((e) => proposal_js_1.HostChainFeeAbsConfig.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allHostChainConfig?.length) {
            obj.allHostChainConfig = message.allHostChainConfig.map((e) => proposal_js_1.HostChainFeeAbsConfig.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AllQueryHostChainConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAllQueryHostChainConfigResponse();
        message.allHostChainConfig = object.allHostChainConfig?.map((e) => proposal_js_1.HostChainFeeAbsConfig.fromPartial(e)) || [];
        return message;
    },
};
exports.QueryServiceName = "feeabstraction.feeabs.v1beta1.Query";
class QueryClientImpl {
    rpc;
    service;
    constructor(rpc, opts) {
        this.service = opts?.service || exports.QueryServiceName;
        this.rpc = rpc;
        this.OsmosisArithmeticTwap = this.OsmosisArithmeticTwap.bind(this);
        this.FeeabsModuleBalances = this.FeeabsModuleBalances.bind(this);
        this.HostChainConfig = this.HostChainConfig.bind(this);
        this.AllHostChainConfig = this.AllHostChainConfig.bind(this);
    }
    OsmosisArithmeticTwap(request) {
        const data = exports.QueryOsmosisArithmeticTwapRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "OsmosisArithmeticTwap", data);
        return promise.then((data) => exports.QueryOsmosisArithmeticTwapResponse.decode(new wire_1.BinaryReader(data)));
    }
    FeeabsModuleBalances(request) {
        const data = exports.QueryFeeabsModuleBalacesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FeeabsModuleBalances", data);
        return promise.then((data) => exports.QueryFeeabsModuleBalacesResponse.decode(new wire_1.BinaryReader(data)));
    }
    HostChainConfig(request) {
        const data = exports.QueryHostChainConfigRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "HostChainConfig", data);
        return promise.then((data) => exports.QueryHostChainConfigResponse.decode(new wire_1.BinaryReader(data)));
    }
    AllHostChainConfig(request) {
        const data = exports.AllQueryHostChainConfigRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AllHostChainConfig", data);
        return promise.then((data) => exports.AllQueryHostChainConfigResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map