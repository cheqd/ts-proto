// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: feeabstraction/feeabs/v1beta1/osmosisibc.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import { RequestQuery, ResponseQuery } from "../../../tendermint/abci/types.js";
function createBaseQueryArithmeticTwapToNowRequest() {
    return { poolId: 0n, baseAsset: "", quoteAsset: "", startTime: undefined };
}
export const QueryArithmeticTwapToNowRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.poolId !== 0n) {
            if (BigInt.asUintN(64, message.poolId) !== message.poolId) {
                throw new globalThis.Error("value provided for field message.poolId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.poolId);
        }
        if (message.baseAsset !== "") {
            writer.uint32(18).string(message.baseAsset);
        }
        if (message.quoteAsset !== "") {
            writer.uint32(26).string(message.quoteAsset);
        }
        if (message.startTime !== undefined) {
            Timestamp.encode(toTimestamp(message.startTime), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryArithmeticTwapToNowRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.poolId = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.baseAsset = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.quoteAsset = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            poolId: isSet(object.poolId) ? BigInt(object.poolId) : 0n,
            baseAsset: isSet(object.baseAsset) ? globalThis.String(object.baseAsset) : "",
            quoteAsset: isSet(object.quoteAsset) ? globalThis.String(object.quoteAsset) : "",
            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.poolId !== 0n) {
            obj.poolId = message.poolId.toString();
        }
        if (message.baseAsset !== "") {
            obj.baseAsset = message.baseAsset;
        }
        if (message.quoteAsset !== "") {
            obj.quoteAsset = message.quoteAsset;
        }
        if (message.startTime !== undefined) {
            obj.startTime = message.startTime.toISOString();
        }
        return obj;
    },
    create(base) {
        return QueryArithmeticTwapToNowRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryArithmeticTwapToNowRequest();
        message.poolId = object.poolId ?? 0n;
        message.baseAsset = object.baseAsset ?? "";
        message.quoteAsset = object.quoteAsset ?? "";
        message.startTime = object.startTime ?? undefined;
        return message;
    },
};
function createBaseQueryArithmeticTwapToNowResponse() {
    return { arithmeticTwap: "" };
}
export const QueryArithmeticTwapToNowResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.arithmeticTwap !== "") {
            writer.uint32(10).string(message.arithmeticTwap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryArithmeticTwapToNowResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.arithmeticTwap = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { arithmeticTwap: isSet(object.arithmeticTwap) ? globalThis.String(object.arithmeticTwap) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.arithmeticTwap !== "") {
            obj.arithmeticTwap = message.arithmeticTwap;
        }
        return obj;
    },
    create(base) {
        return QueryArithmeticTwapToNowResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryArithmeticTwapToNowResponse();
        message.arithmeticTwap = object.arithmeticTwap ?? "";
        return message;
    },
};
function createBaseInterchainQueryRequest() {
    return { data: new Uint8Array(0), path: "" };
}
export const InterchainQueryRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        if (message.path !== "") {
            writer.uint32(18).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInterchainQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
            path: isSet(object.path) ? globalThis.String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return InterchainQueryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInterchainQueryRequest();
        message.data = object.data ?? new Uint8Array(0);
        message.path = object.path ?? "";
        return message;
    },
};
function createBaseInterchainQueryPacketData() {
    return { data: new Uint8Array(0), memo: "" };
}
export const InterchainQueryPacketData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        if (message.memo !== "") {
            writer.uint32(18).string(message.memo);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInterchainQueryPacketData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.memo = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
            memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.memo !== "") {
            obj.memo = message.memo;
        }
        return obj;
    },
    create(base) {
        return InterchainQueryPacketData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInterchainQueryPacketData();
        message.data = object.data ?? new Uint8Array(0);
        message.memo = object.memo ?? "";
        return message;
    },
};
function createBaseInterchainQueryPacketAck() {
    return { data: new Uint8Array(0) };
}
export const InterchainQueryPacketAck = {
    encode(message, writer = new BinaryWriter()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInterchainQueryPacketAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return InterchainQueryPacketAck.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInterchainQueryPacketAck();
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseInterchainQueryRequestPacket() {
    return { requests: [] };
}
export const InterchainQueryRequestPacket = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.requests) {
            InterchainQueryRequest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInterchainQueryRequestPacket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requests.push(InterchainQueryRequest.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requests: globalThis.Array.isArray(object?.requests)
                ? object.requests.map((e) => InterchainQueryRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requests?.length) {
            obj.requests = message.requests.map((e) => InterchainQueryRequest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return InterchainQueryRequestPacket.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInterchainQueryRequestPacket();
        message.requests = object.requests?.map((e) => InterchainQueryRequest.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCosmosQuery() {
    return { requests: [] };
}
export const CosmosQuery = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.requests) {
            RequestQuery.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCosmosQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requests.push(RequestQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requests: globalThis.Array.isArray(object?.requests)
                ? object.requests.map((e) => RequestQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requests?.length) {
            obj.requests = message.requests.map((e) => RequestQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return CosmosQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCosmosQuery();
        message.requests = object.requests?.map((e) => RequestQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCosmosResponse() {
    return { responses: [] };
}
export const CosmosResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.responses) {
            ResponseQuery.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCosmosResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.responses.push(ResponseQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            responses: globalThis.Array.isArray(object?.responses)
                ? object.responses.map((e) => ResponseQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.responses?.length) {
            obj.responses = message.responses.map((e) => ResponseQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return CosmosResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCosmosResponse();
        message.responses = object.responses?.map((e) => ResponseQuery.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = BigInt(Math.trunc(date.getTime() / 1_000));
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds.toString()) || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=osmosisibc.js.map