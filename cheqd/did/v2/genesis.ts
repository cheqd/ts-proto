// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cheqd/did/v2/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DidDocWithMetadata } from "./diddoc.js";
import { FeeParams } from "./fee.js";

/**
 * DidDocVersionSet contains all versions of DID Documents and their metadata for a given DID.
 * The latest version of the DID Document set is stored in the latest_version field.
 */
export interface DidDocVersionSet {
  /** Latest version of the DID Document set */
  latestVersion: string;
  /** All versions of the DID Document set */
  didDocs: DidDocWithMetadata[];
}

/** GenesisState defines the cheqd DID module's genesis state. */
export interface GenesisState {
  /**
   * Namespace for the DID module
   * Example: mainnet, testnet, local
   */
  didNamespace: string;
  /** All DID Document version sets (contains all versions of all DID Documents) */
  versionSets: DidDocVersionSet[];
  /**
   * Fee parameters for the DID module
   * Defines fixed fees and burn percentage for each DID operation type (create, update, delete)
   */
  feeParams: FeeParams | undefined;
}

function createBaseDidDocVersionSet(): DidDocVersionSet {
  return { latestVersion: "", didDocs: [] };
}

export const DidDocVersionSet: MessageFns<DidDocVersionSet> = {
  encode(message: DidDocVersionSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latestVersion !== "") {
      writer.uint32(10).string(message.latestVersion);
    }
    for (const v of message.didDocs) {
      DidDocWithMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DidDocVersionSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDidDocVersionSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.latestVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.didDocs.push(DidDocWithMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DidDocVersionSet {
    return {
      latestVersion: isSet(object.latestVersion) ? globalThis.String(object.latestVersion) : "",
      didDocs: globalThis.Array.isArray(object?.didDocs)
        ? object.didDocs.map((e: any) => DidDocWithMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DidDocVersionSet): unknown {
    const obj: any = {};
    if (message.latestVersion !== "") {
      obj.latestVersion = message.latestVersion;
    }
    if (message.didDocs?.length) {
      obj.didDocs = message.didDocs.map((e) => DidDocWithMetadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DidDocVersionSet>, I>>(base?: I): DidDocVersionSet {
    return DidDocVersionSet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DidDocVersionSet>, I>>(object: I): DidDocVersionSet {
    const message = createBaseDidDocVersionSet();
    message.latestVersion = object.latestVersion ?? "";
    message.didDocs = object.didDocs?.map((e) => DidDocWithMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGenesisState(): GenesisState {
  return { didNamespace: "", versionSets: [], feeParams: undefined };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.didNamespace !== "") {
      writer.uint32(10).string(message.didNamespace);
    }
    for (const v of message.versionSets) {
      DidDocVersionSet.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.feeParams !== undefined) {
      FeeParams.encode(message.feeParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.didNamespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.versionSets.push(DidDocVersionSet.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.feeParams = FeeParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      didNamespace: isSet(object.didNamespace) ? globalThis.String(object.didNamespace) : "",
      versionSets: globalThis.Array.isArray(object?.versionSets)
        ? object.versionSets.map((e: any) => DidDocVersionSet.fromJSON(e))
        : [],
      feeParams: isSet(object.feeParams) ? FeeParams.fromJSON(object.feeParams) : undefined,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.didNamespace !== "") {
      obj.didNamespace = message.didNamespace;
    }
    if (message.versionSets?.length) {
      obj.versionSets = message.versionSets.map((e) => DidDocVersionSet.toJSON(e));
    }
    if (message.feeParams !== undefined) {
      obj.feeParams = FeeParams.toJSON(message.feeParams);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.didNamespace = object.didNamespace ?? "";
    message.versionSets = object.versionSets?.map((e) => DidDocVersionSet.fromPartial(e)) || [];
    message.feeParams = (object.feeParams !== undefined && object.feeParams !== null)
      ? FeeParams.fromPartial(object.feeParams)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
