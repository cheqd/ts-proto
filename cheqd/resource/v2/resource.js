"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: cheqd/resource/v2/resource.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceWithMetadata = exports.AlternativeUri = exports.Metadata = exports.Resource = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_js_1 = require("../../../google/protobuf/timestamp.js");
function createBaseResource() {
    return { data: new Uint8Array(0) };
}
exports.Resource = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.Resource.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResource();
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseMetadata() {
    return {
        collectionId: "",
        id: "",
        name: "",
        version: "",
        resourceType: "",
        alsoKnownAs: [],
        mediaType: "",
        created: undefined,
        checksum: "",
        previousVersionId: "",
        nextVersionId: "",
    };
}
exports.Metadata = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.collectionId !== "") {
            writer.uint32(10).string(message.collectionId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.version !== "") {
            writer.uint32(34).string(message.version);
        }
        if (message.resourceType !== "") {
            writer.uint32(42).string(message.resourceType);
        }
        for (const v of message.alsoKnownAs) {
            exports.AlternativeUri.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.mediaType !== "") {
            writer.uint32(58).string(message.mediaType);
        }
        if (message.created !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.created), writer.uint32(66).fork()).join();
        }
        if (message.checksum !== "") {
            writer.uint32(74).string(message.checksum);
        }
        if (message.previousVersionId !== "") {
            writer.uint32(82).string(message.previousVersionId);
        }
        if (message.nextVersionId !== "") {
            writer.uint32(90).string(message.nextVersionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.collectionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.resourceType = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.alsoKnownAs.push(exports.AlternativeUri.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.mediaType = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.created = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.checksum = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.previousVersionId = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.nextVersionId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
            alsoKnownAs: globalThis.Array.isArray(object?.alsoKnownAs)
                ? object.alsoKnownAs.map((e) => exports.AlternativeUri.fromJSON(e))
                : [],
            mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : "",
            created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
            checksum: isSet(object.checksum) ? globalThis.String(object.checksum) : "",
            previousVersionId: isSet(object.previousVersionId) ? globalThis.String(object.previousVersionId) : "",
            nextVersionId: isSet(object.nextVersionId) ? globalThis.String(object.nextVersionId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.collectionId !== "") {
            obj.collectionId = message.collectionId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.resourceType !== "") {
            obj.resourceType = message.resourceType;
        }
        if (message.alsoKnownAs?.length) {
            obj.alsoKnownAs = message.alsoKnownAs.map((e) => exports.AlternativeUri.toJSON(e));
        }
        if (message.mediaType !== "") {
            obj.mediaType = message.mediaType;
        }
        if (message.created !== undefined) {
            obj.created = message.created.toISOString();
        }
        if (message.checksum !== "") {
            obj.checksum = message.checksum;
        }
        if (message.previousVersionId !== "") {
            obj.previousVersionId = message.previousVersionId;
        }
        if (message.nextVersionId !== "") {
            obj.nextVersionId = message.nextVersionId;
        }
        return obj;
    },
    create(base) {
        return exports.Metadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMetadata();
        message.collectionId = object.collectionId ?? "";
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.version = object.version ?? "";
        message.resourceType = object.resourceType ?? "";
        message.alsoKnownAs = object.alsoKnownAs?.map((e) => exports.AlternativeUri.fromPartial(e)) || [];
        message.mediaType = object.mediaType ?? "";
        message.created = object.created ?? undefined;
        message.checksum = object.checksum ?? "";
        message.previousVersionId = object.previousVersionId ?? "";
        message.nextVersionId = object.nextVersionId ?? "";
        return message;
    },
};
function createBaseAlternativeUri() {
    return { uri: "", description: "" };
}
exports.AlternativeUri = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uri !== "") {
            writer.uint32(10).string(message.uri);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlternativeUri();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.uri !== "") {
            obj.uri = message.uri;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.AlternativeUri.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlternativeUri();
        message.uri = object.uri ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseResourceWithMetadata() {
    return { resource: undefined, metadata: undefined };
}
exports.ResourceWithMetadata = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.resource !== undefined) {
            exports.Resource.encode(message.resource, writer.uint32(10).fork()).join();
        }
        if (message.metadata !== undefined) {
            exports.Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResourceWithMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.resource = exports.Resource.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.metadata = exports.Metadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            resource: isSet(object.resource) ? exports.Resource.fromJSON(object.resource) : undefined,
            metadata: isSet(object.metadata) ? exports.Metadata.fromJSON(object.metadata) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.resource !== undefined) {
            obj.resource = exports.Resource.toJSON(message.resource);
        }
        if (message.metadata !== undefined) {
            obj.metadata = exports.Metadata.toJSON(message.metadata);
        }
        return obj;
    },
    create(base) {
        return exports.ResourceWithMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResourceWithMetadata();
        message.resource = (object.resource !== undefined && object.resource !== null)
            ? exports.Resource.fromPartial(object.resource)
            : undefined;
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? exports.Metadata.fromPartial(object.metadata)
            : undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = BigInt(Math.trunc(date.getTime() / 1_000));
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds.toString()) || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_js_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=resource.js.map